---
format: 
  html:
    theme: meds-website-styles.scss
    mainfont: Nunito
    toc: true
    toc-location: left
    toc-depth: 2
    smooth-scroll: true
---

### **Why use RStudio to set up your Quarto website?**

-   It's *super* easy to do with the click of just a few buttons! **Remember**, the commands we type out in our Terminal window underlie the buttons we click on in the RStudio IDE -- RStudio simply provides a user-friendly interface for executing those commands.

### **Steps:**

1.  **Create a new R project with some necessary website files.** Start by opening up RStudio and clicking on the ![A blue cube symbol with 'R' in the center is on the left. To the right are the words 'Project: (None)' in white, with a downward facing arrow, signifying a drop down menu](media/project.png){alt="A blue cube symbol with 'R' in the center is on the left. To the right are the words 'Project: (None)' in white, with a downward facing arrow, signifying a drop down menu" style="display: inline-block; margin: 0; position: relative; top: 0px; width:80px;height:18px;"} button in the top right corner. Select **New Project...**

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("media/vRStudio1.png")
```

Choose **New Directory**, then **Quarto Website.**

```{r}
#| echo: false
#| layout-ncol: 2
#| column: page
knitr::include_graphics("media/vRStudio2.png")
knitr::include_graphics("media/vRStudio3.png")
```

{{< include /sections/NOTE-jargon.qmd >}}

And finally, fill out the **Directory name:** field (this is the name of your R project, and eventually, your remote (i.e. GitHub) repository name ***(Important: see note below re: naming!)***, and choose where to save your directory to using the **Browse** button. Click **Create Project**.

{{< include /sections/IMPORTANT-repo-name.qmd >}}

{{< include /sections/TIP-organizing-repos.qmd >}}

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("media/vRStudio4.png")
```

-   You should now see a folder called `mysite` (or whatever you named your Quarto project) with a series of files (`_quarto.yml`, `about.qmd`, `index.qmd`, `styles.css`) that provide the scaffolding for your website in the **Files** tab (in the bottom right panel in RStudio, if you haven't altered the pane layout).

{{< include /sections/NOTE-tour.qmd >}}

```{r}
#| echo: false
#| fig-align: center
# knitr::include_graphics("media/mysite_scaffolding.png")
```

2. **Preview your very basic, but functional website** by typing the following command in the Terminal:

```{bash filename="Terminal"}
#| eval: false
quarto preview
```

-   Your site preview should open up in your browser. Quit your preview by clicking the **Stop** button in the top right corner of your Terminal. 

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("media/preview-R.png")
```

<!-- ::: {.center-text .gray-text} -->
<!-- My website preview, which opens in a browser window after running `quarto preview` in the command line. -->
<!-- ::: -->

::: {.callout-tip}
## `quarto preview` makes it easy to quickly view iterative changes
Running `quarto preview` launches a preview of your website in a browser window. So long as you leave the preview running, it will update each time you make and save changes to website files (which makes iterating on your work really easy!).

```{r}
#| eval: false
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
#knitr::include_graphics("media/quarto-preview.gif")
```
:::

3. **Configure git**
- In RStudio, open the Terminal. Run the following commands (by pressing **return** after each line). Be sure to replace the username (keep the quotation marks!) with *your* GitHub username and the email with the email you used for your GitHub account. 

```{bash filename="RStudio Terminal"}
#| eval: false
git config --global user.name "Jane Doe"
git config --global user.email janedoe@example.com
```

- Then, in the Terminal run the following, and carefully check that the name and email returned match your GitHub information: 

```{bash filename="RStudio Terminal"}
#| eval: false
git config --list --global
```

4. **Store your GitHub personal access token (PAT)**
**First:** What even is a personal access token? From GitHub's documentation:

> Personal access tokens (PATs) are an alternative to using passwords for authentication to GitHub when using the [GitHub API](https://docs.github.com/en/rest/overview/other-authentication-methods#via-oauth-and-personal-access-tokens) or the [command line](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#using-a-token-on-the-command-line).

This means that in order to push your work (files, scripts, etc.) from your laptop (or any other computer) to GitHub, you'll need to first to generate a PAT. **Importantly, you'll need to generate a PAT for each computer you wish to work from.** For example, we will complete the following steps to create a PAT for your personal laptop, but you'll also need to create a PAT if/when you choose to work on a second computer at home or any of the Bren servers. Good news is that you can follow these same steps when you're ready to set up additional PATs on other machines. For now, let's get a PAT for our personal laptop squared away:  

- Once you have git configured successfully, install the `{usethis}` package in R by running the following in the RStudio Console: 

```{r filename="RStudio Console"}
#| eval: false
install.packages("usethis")
```
    
A lot of scary looking red text will show up while this is installing - don’t panic. If you get to the end and see something like below (with no error) it’s installed successfully.

```{r}
#| echo: false
#| fig-align: "center"
knitr::include_graphics("media/install-pkg-success.png")
```

- Run the following in the RStudio Console: 

```{r filename="RStudio Console"}
#| eval: false
usethis::create_github_token() 
```    

- Enter your GitHub password if/when prompted. You’ll be taken to a screen that looks like this:

```{r}
#| echo: false
#| fig-align: "center"
knitr::include_graphics("media/new-pat.png")
```

- In the **Note** field, you should see some autopopulated text: `R:GITHUB_PAT`. We suggest changing this to something that signifies what machine it's being used for. For example, if you are generating a PAT for your laptop, you might choose to rename it, `My Personal Laptop`.

- Next, you'll see a section called **Select scopes** with reasonable options already selected for you. Do not change anything. Just scroll down to the bottom of that page and click the green **Generate token** button:

```{r}
#| echo: false
#| fig-align: "center"
knitr::include_graphics("media/generate-token.png")
```

- Copy the generated PAT to your clipboard

- Back in RStudio, run the following in the Console:

```{r filename="RStudio Console"}
#| eval: false
gitcreds::gitcreds_set()
```

This will prompt you to paste the PAT you just copied from GitHub. Paste the PAT, press Enter to run. You should see something like this show up if all is well so far (you’ll have pasted your PAT where the example below says “REDACTED”): 

```{r}
#| echo: false
#| fig-align: "center"
knitr::include_graphics("media/gitcreds-set.png")
```

- In the RStudio Console, run: 

```{r filename="RStudio Console"}
#| eval: false
usethis::git_sitrep()
```

Does it return information about your connected GitHub account that looks something like below? Great! You’ve configured git and successfully stored your PAT. 

```{r}
#| echo: false
#| fig-align: "center"
knitr::include_graphics("media/git_sitrep.png")
```

::: {.callout-note}
## **A note on expiring tokens:** 
Setting an expiration date on personal access tokens is highly recommended in order to keep your information secure. GitHub will send you an email when it's time to regenerate a token that's about to expire. Follow the email prompts, then use `gitcreds::gitcreds_set()` to reset your token. 
:::

5. **Initialize your R Project folder as a git repository using `usethis::use_git()`:** In the Console, run `usethis::use_git()` to create a local git repository. Choose **yes** when asked if it's okay to commit any uncommitted files. If asked to restart R, choose **yes**. Once complete, you should see the **Git** tab appear in your top left pane in RStudio.

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("media/git-tab.png")
```

::: {.callout-note collapse=true}
## What is a git repository?
When we initialize our R project, `mysite/` (or `YourGitHubUsername.github.io/`), as a git repository using `usethis::use_git()`, a hidden `.git/` folder is created *within* that project folder. This hidden `.git/` folder *is* the git repository. As you use git commands (or RStudio's GUI buttons) to capture versions or "snapshots" of your work, those versions (and their associated metadata) get stored within the `.git/` folder. This allows you to access and / or recover any previous versions of your work. If you delete `.git/`, you delete your project's history. Here is an example website repository, represented visually:

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("media/git-repo-ex.png")
```
:::

6. **Check the name of your default branch (the only branch you should have at the moment)** -- that is, the branch that all changes eventually get merged back into (if you're building a website, this branch is typically the one you'll want to deploy). There are multiple ways to check this -- here are two easy options:

    a.  Open RStudio's Terminal window (next to the Console) and run either `git branch` (this prints all local branches and highlights the one that you're currently on) or `git status` (the first printed line should say `On branch <branch_name>`). 

    b.  Click on the **Git** tab in the top right pane of RStudio. Next to the ![A white diamond with two purple squares, one directly above and one directly to the right, connected to the diamond by a line.](media/branch.png){alt="A white diamond with two purple squares, one directly above and one directly to the right, connected to the diamond by a line." style="display: inline-block; margin: 0; position: relative; top: 0px; width:20px;height:18px;"} symbol, you should see a dropdown menu that displays the name of your current branch.

7.  **If your current branch is named `master`, update the name to `main`.** *(If your branch is named *`main`*, you're good to go! You can skip this step.)* In the console, run `usethis::git_default_branch_rename(from = "master", to = "main")` to update your default branch name. Confirm that it updated by running `git status` again in your Terminal -- the first printed line should now read, `On branch main`.
    <!-- and b. on your remote by refreshing your GitHub repo (in your web browser) -- you should see the updated default branch name at the top of your repo -->
    - The above function only updates your default branch name for *this* respository. **You'll also want to update your git config file so that the default branch name of any future local git repository is automatically named `main`.**  Run `usethis::use_git_config(init.defaultBranch = "main")` to do so. 

{{< include /sections/NOTE-master-main.qmd >}}

8. **Create an upstream remote repository (i.e. GitHub repo) using `usethis::use_github()`.** Running `usethis::use_github()` in the Console will open up your web browser to your new remote repository on GitHub -- it should already have the same name as your local git repo / R project.

{{< include /sections/NOTE-git-github.qmd >}}

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "After running `usethis::use_github()` your browser window should open up to your new GitHub repository and look similar to the browser above."
knitr::include_graphics("media/mysite-remote.png")
```

{{< include /sections/NOTE-workflow.qmd >}}
